require_relative "base"

use_default_options do |o|
  o.add :mapping_file, "--mapping-file FILE", "Mapping file how to extends hold date ends", String, required: true
end

MAPPING_FILE_NAME = File.expand_path(options[:mapping_file])
BACKUP_FILE_NAME  = "extend-end-hold-dates-#{TIMESTAMP}.bak"
LOG_FILE_NAME     = "extend-end-hold-dates-#{TIMESTAMP}.log"

source [true]

transformation ->(_) do
  log(LOG_FILE_NAME, message: "!!! DRY RUN !!!") if options[:dry_run]

  # Build mapping table
  date_mappings = []

  File.open(MAPPING_FILE_NAME, 'r').each do |line|
    next if line.starts_with?("#")

    end_hold_date, new_end_hold_date = line.split(",").map(&:strip).map(&:presence).compact

    if end_hold_date && new_end_hold_date
      date_mappings << {
        end_hold_date: end_hold_date,
        new_end_hold_date: new_end_hold_date
      }
    end
  end

  if date_mappings.blank?
    log(LOG_FILE_NAME, message: "ERROR: Invalid mapping file.")
    exit
  else
    db.transaction do
      dataset = db["
        select
          pad50.z37.z37_rec_key,
          pad50.z37.z37_end_hold_date
        from
          pad50.z37
        where
          pad50.z37.z37_end_hold_date in (#{date_mappings.map{|d| d[:end_hold_date]}.map{|d| "'#{d}'"}.join(",")})
        order by
          pad50.z37.z37_end_hold_date desc
      "]

      total_number_of_items = dataset.count
      total_number_of_items_length = total_number_of_items.to_s.length
      log(LOG_FILE_NAME, message: "Processing #{total_number_of_items} items...")

      i = 0
      dataset.all do |row|
        i += 1
        item_number = i.to_s.rjust(total_number_of_items_length, ' ')

        end_hold_date = row[:z37_end_hold_date].to_s
        date_mapping  = date_mappings.find{|d| d[:end_hold_date] == end_hold_date}

        unless date_mapping
          log(LOG_FILE_NAME, message: "#{item_number}: ERROR #{row[:z37_rec_key]}: No mapping found.")
        else
          # Get new end hold date
          new_end_hold_date = date_mapping[:new_end_hold_date]

          # Save backup
          log(BACKUP_FILE_NAME, log_on_console: false, message: "#{row[:z37_rec_key]},#{end_hold_date}")

          # Set new due date
          unless options[:dry_run]
            db[Sequel[:pad50][:z37]].where(z37_rec_key: row[:z37_rec_key]).update(z37_end_hold_date: new_end_hold_date)
          end

          # Print info
          log(LOG_FILE_NAME, message: "#{item_number}: OK #{row[:z37_rec_key]}: #{end_hold_date} -> #{new_end_hold_date}")
        end
      end

      log(LOG_FILE_NAME, message: "DONE!")
    end
  end
end
